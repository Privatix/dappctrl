// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type accountTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *accountTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("accounts").
func (v *accountTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *accountTableType) Columns() []string {
	return []string{"id", "eth_addr", "public_key", "private_key", "is_default", "in_use", "name", "ptc_balance", "psc_balance", "eth_balance", "last_balance_check"}
}

// NewStruct makes a new struct for that view or table.
func (v *accountTableType) NewStruct() reform.Struct {
	return new(Account)
}

// NewRecord makes a new record for that table.
func (v *accountTableType) NewRecord() reform.Record {
	return new(Account)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *accountTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// AccountTable represents accounts view or table in SQL database.
var AccountTable = &accountTableType{
	s: parse.StructInfo{Type: "Account", SQLSchema: "", SQLName: "accounts", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "EthAddr", Type: "HexString", Column: "eth_addr"}, {Name: "PublicKey", Type: "Base64String", Column: "public_key"}, {Name: "PrivateKey", Type: "Base64String", Column: "private_key"}, {Name: "IsDefault", Type: "bool", Column: "is_default"}, {Name: "InUse", Type: "bool", Column: "in_use"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "PTCBalance", Type: "uint64", Column: "ptc_balance"}, {Name: "PSCBalance", Type: "uint64", Column: "psc_balance"}, {Name: "EthBalance", Type: "Base64BigInt", Column: "eth_balance"}, {Name: "LastBalanceCheck", Type: "*time.Time", Column: "last_balance_check"}}, PKFieldIndex: 0},
	z: new(Account).Values(),
}

// String returns a string representation of this struct or record.
func (s Account) String() string {
	res := make([]string, 11)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "EthAddr: " + reform.Inspect(s.EthAddr, true)
	res[2] = "PublicKey: " + reform.Inspect(s.PublicKey, true)
	res[3] = "PrivateKey: " + reform.Inspect(s.PrivateKey, true)
	res[4] = "IsDefault: " + reform.Inspect(s.IsDefault, true)
	res[5] = "InUse: " + reform.Inspect(s.InUse, true)
	res[6] = "Name: " + reform.Inspect(s.Name, true)
	res[7] = "PTCBalance: " + reform.Inspect(s.PTCBalance, true)
	res[8] = "PSCBalance: " + reform.Inspect(s.PSCBalance, true)
	res[9] = "EthBalance: " + reform.Inspect(s.EthBalance, true)
	res[10] = "LastBalanceCheck: " + reform.Inspect(s.LastBalanceCheck, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Account) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.EthAddr,
		s.PublicKey,
		s.PrivateKey,
		s.IsDefault,
		s.InUse,
		s.Name,
		s.PTCBalance,
		s.PSCBalance,
		s.EthBalance,
		s.LastBalanceCheck,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Account) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.EthAddr,
		&s.PublicKey,
		&s.PrivateKey,
		&s.IsDefault,
		&s.InUse,
		&s.Name,
		&s.PTCBalance,
		&s.PSCBalance,
		&s.EthBalance,
		&s.LastBalanceCheck,
	}
}

// View returns View object for that struct.
func (s *Account) View() reform.View {
	return AccountTable
}

// Table returns Table object for that record.
func (s *Account) Table() reform.Table {
	return AccountTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Account) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Account) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Account) HasPK() bool {
	return s.ID != AccountTable.z[AccountTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Account) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = AccountTable
	_ reform.Struct = (*Account)(nil)
	_ reform.Table  = AccountTable
	_ reform.Record = (*Account)(nil)
	_ fmt.Stringer  = (*Account)(nil)
)

type userTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *userTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userTableType) Columns() []string {
	return []string{"id", "eth_addr", "public_key"}
}

// NewStruct makes a new struct for that view or table.
func (v *userTableType) NewStruct() reform.Struct {
	return new(User)
}

// NewRecord makes a new record for that table.
func (v *userTableType) NewRecord() reform.Record {
	return new(User)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *userTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UserTable represents users view or table in SQL database.
var UserTable = &userTableType{
	s: parse.StructInfo{Type: "User", SQLSchema: "", SQLName: "users", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "EthAddr", Type: "HexString", Column: "eth_addr"}, {Name: "PublicKey", Type: "Base64String", Column: "public_key"}}, PKFieldIndex: 0},
	z: new(User).Values(),
}

// String returns a string representation of this struct or record.
func (s User) String() string {
	res := make([]string, 3)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "EthAddr: " + reform.Inspect(s.EthAddr, true)
	res[2] = "PublicKey: " + reform.Inspect(s.PublicKey, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *User) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.EthAddr,
		s.PublicKey,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *User) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.EthAddr,
		&s.PublicKey,
	}
}

// View returns View object for that struct.
func (s *User) View() reform.View {
	return UserTable
}

// Table returns Table object for that record.
func (s *User) Table() reform.Table {
	return UserTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *User) HasPK() bool {
	return s.ID != UserTable.z[UserTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *User) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = UserTable
	_ reform.Struct = (*User)(nil)
	_ reform.Table  = UserTable
	_ reform.Record = (*User)(nil)
	_ fmt.Stringer  = (*User)(nil)
)

type templateTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *templateTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("templates").
func (v *templateTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *templateTableType) Columns() []string {
	return []string{"id", "hash", "raw", "kind"}
}

// NewStruct makes a new struct for that view or table.
func (v *templateTableType) NewStruct() reform.Struct {
	return new(Template)
}

// NewRecord makes a new record for that table.
func (v *templateTableType) NewRecord() reform.Record {
	return new(Template)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *templateTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// TemplateTable represents templates view or table in SQL database.
var TemplateTable = &templateTableType{
	s: parse.StructInfo{Type: "Template", SQLSchema: "", SQLName: "templates", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Hash", Type: "HexString", Column: "hash"}, {Name: "Raw", Type: "json.RawMessage", Column: "raw"}, {Name: "Kind", Type: "string", Column: "kind"}}, PKFieldIndex: 0},
	z: new(Template).Values(),
}

// String returns a string representation of this struct or record.
func (s Template) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Hash: " + reform.Inspect(s.Hash, true)
	res[2] = "Raw: " + reform.Inspect(s.Raw, true)
	res[3] = "Kind: " + reform.Inspect(s.Kind, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Template) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Hash,
		s.Raw,
		s.Kind,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Template) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Hash,
		&s.Raw,
		&s.Kind,
	}
}

// View returns View object for that struct.
func (s *Template) View() reform.View {
	return TemplateTable
}

// Table returns Table object for that record.
func (s *Template) Table() reform.Table {
	return TemplateTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Template) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Template) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Template) HasPK() bool {
	return s.ID != TemplateTable.z[TemplateTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Template) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = TemplateTable
	_ reform.Struct = (*Template)(nil)
	_ reform.Table  = TemplateTable
	_ reform.Record = (*Template)(nil)
	_ fmt.Stringer  = (*Template)(nil)
)

type productTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("products").
func (v *productTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productTableType) Columns() []string {
	return []string{"id", "name", "offer_tpl_id", "offer_access_id", "usage_rep_type", "is_server", "salt", "password", "client_ident", "config", "service_endpoint_address", "country"}
}

// NewStruct makes a new struct for that view or table.
func (v *productTableType) NewStruct() reform.Struct {
	return new(Product)
}

// NewRecord makes a new record for that table.
func (v *productTableType) NewRecord() reform.Record {
	return new(Product)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductTable represents products view or table in SQL database.
var ProductTable = &productTableType{
	s: parse.StructInfo{Type: "Product", SQLSchema: "", SQLName: "products", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "OfferTplID", Type: "*string", Column: "offer_tpl_id"}, {Name: "OfferAccessID", Type: "*string", Column: "offer_access_id"}, {Name: "UsageRepType", Type: "string", Column: "usage_rep_type"}, {Name: "IsServer", Type: "bool", Column: "is_server"}, {Name: "Salt", Type: "uint64", Column: "salt"}, {Name: "Password", Type: "Base64String", Column: "password"}, {Name: "ClientIdent", Type: "string", Column: "client_ident"}, {Name: "Config", Type: "json.RawMessage", Column: "config"}, {Name: "ServiceEndpointAddress", Type: "*string", Column: "service_endpoint_address"}, {Name: "Country", Type: "*string", Column: "country"}}, PKFieldIndex: 0},
	z: new(Product).Values(),
}

// String returns a string representation of this struct or record.
func (s Product) String() string {
	res := make([]string, 12)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "OfferTplID: " + reform.Inspect(s.OfferTplID, true)
	res[3] = "OfferAccessID: " + reform.Inspect(s.OfferAccessID, true)
	res[4] = "UsageRepType: " + reform.Inspect(s.UsageRepType, true)
	res[5] = "IsServer: " + reform.Inspect(s.IsServer, true)
	res[6] = "Salt: " + reform.Inspect(s.Salt, true)
	res[7] = "Password: " + reform.Inspect(s.Password, true)
	res[8] = "ClientIdent: " + reform.Inspect(s.ClientIdent, true)
	res[9] = "Config: " + reform.Inspect(s.Config, true)
	res[10] = "ServiceEndpointAddress: " + reform.Inspect(s.ServiceEndpointAddress, true)
	res[11] = "Country: " + reform.Inspect(s.Country, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Product) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.OfferTplID,
		s.OfferAccessID,
		s.UsageRepType,
		s.IsServer,
		s.Salt,
		s.Password,
		s.ClientIdent,
		s.Config,
		s.ServiceEndpointAddress,
		s.Country,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Product) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.OfferTplID,
		&s.OfferAccessID,
		&s.UsageRepType,
		&s.IsServer,
		&s.Salt,
		&s.Password,
		&s.ClientIdent,
		&s.Config,
		&s.ServiceEndpointAddress,
		&s.Country,
	}
}

// View returns View object for that struct.
func (s *Product) View() reform.View {
	return ProductTable
}

// Table returns Table object for that record.
func (s *Product) Table() reform.Table {
	return ProductTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Product) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Product) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Product) HasPK() bool {
	return s.ID != ProductTable.z[ProductTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Product) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ProductTable
	_ reform.Struct = (*Product)(nil)
	_ reform.Table  = ProductTable
	_ reform.Record = (*Product)(nil)
	_ fmt.Stringer  = (*Product)(nil)
)

type offeringTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *offeringTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("offerings").
func (v *offeringTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *offeringTableType) Columns() []string {
	return []string{"id", "is_local", "ip_type", "tpl", "product", "hash", "status", "block_number_updated", "agent", "raw_msg", "service_name", "description", "country", "supply", "current_supply", "unit_name", "unit_type", "billing_type", "setup_price", "unit_price", "min_units", "max_unit", "billing_interval", "max_billing_unit_lag", "max_suspended_time", "max_inactive_time_sec", "free_units", "additional_params", "auto_pop_up", "somc_type", "somc_data", "somc_success_ping"}
}

// NewStruct makes a new struct for that view or table.
func (v *offeringTableType) NewStruct() reform.Struct {
	return new(Offering)
}

// NewRecord makes a new record for that table.
func (v *offeringTableType) NewRecord() reform.Record {
	return new(Offering)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *offeringTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// OfferingTable represents offerings view or table in SQL database.
var OfferingTable = &offeringTableType{
	s: parse.StructInfo{Type: "Offering", SQLSchema: "", SQLName: "offerings", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "IsLocal", Type: "bool", Column: "is_local"}, {Name: "IPType", Type: "string", Column: "ip_type"}, {Name: "Template", Type: "string", Column: "tpl"}, {Name: "Product", Type: "string", Column: "product"}, {Name: "Hash", Type: "HexString", Column: "hash"}, {Name: "Status", Type: "string", Column: "status"}, {Name: "BlockNumberUpdated", Type: "uint64", Column: "block_number_updated"}, {Name: "Agent", Type: "HexString", Column: "agent"}, {Name: "RawMsg", Type: "Base64String", Column: "raw_msg"}, {Name: "ServiceName", Type: "string", Column: "service_name"}, {Name: "Description", Type: "*string", Column: "description"}, {Name: "Country", Type: "string", Column: "country"}, {Name: "Supply", Type: "uint16", Column: "supply"}, {Name: "CurrentSupply", Type: "uint16", Column: "current_supply"}, {Name: "UnitName", Type: "string", Column: "unit_name"}, {Name: "UnitType", Type: "string", Column: "unit_type"}, {Name: "BillingType", Type: "string", Column: "billing_type"}, {Name: "SetupPrice", Type: "uint64", Column: "setup_price"}, {Name: "UnitPrice", Type: "uint64", Column: "unit_price"}, {Name: "MinUnits", Type: "uint64", Column: "min_units"}, {Name: "MaxUnit", Type: "*uint64", Column: "max_unit"}, {Name: "BillingInterval", Type: "uint", Column: "billing_interval"}, {Name: "MaxBillingUnitLag", Type: "uint", Column: "max_billing_unit_lag"}, {Name: "MaxSuspendTime", Type: "uint", Column: "max_suspended_time"}, {Name: "MaxInactiveTimeSec", Type: "uint64", Column: "max_inactive_time_sec"}, {Name: "FreeUnits", Type: "uint8", Column: "free_units"}, {Name: "AdditionalParams", Type: "json.RawMessage", Column: "additional_params"}, {Name: "AutoPopUp", Type: "*bool", Column: "auto_pop_up"}, {Name: "SOMCType", Type: "uint8", Column: "somc_type"}, {Name: "SOMCData", Type: "Base64String", Column: "somc_data"}, {Name: "SOMCSuccessPing", Type: "*time.Time", Column: "somc_success_ping"}}, PKFieldIndex: 0},
	z: new(Offering).Values(),
}

// String returns a string representation of this struct or record.
func (s Offering) String() string {
	res := make([]string, 32)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "IsLocal: " + reform.Inspect(s.IsLocal, true)
	res[2] = "IPType: " + reform.Inspect(s.IPType, true)
	res[3] = "Template: " + reform.Inspect(s.Template, true)
	res[4] = "Product: " + reform.Inspect(s.Product, true)
	res[5] = "Hash: " + reform.Inspect(s.Hash, true)
	res[6] = "Status: " + reform.Inspect(s.Status, true)
	res[7] = "BlockNumberUpdated: " + reform.Inspect(s.BlockNumberUpdated, true)
	res[8] = "Agent: " + reform.Inspect(s.Agent, true)
	res[9] = "RawMsg: " + reform.Inspect(s.RawMsg, true)
	res[10] = "ServiceName: " + reform.Inspect(s.ServiceName, true)
	res[11] = "Description: " + reform.Inspect(s.Description, true)
	res[12] = "Country: " + reform.Inspect(s.Country, true)
	res[13] = "Supply: " + reform.Inspect(s.Supply, true)
	res[14] = "CurrentSupply: " + reform.Inspect(s.CurrentSupply, true)
	res[15] = "UnitName: " + reform.Inspect(s.UnitName, true)
	res[16] = "UnitType: " + reform.Inspect(s.UnitType, true)
	res[17] = "BillingType: " + reform.Inspect(s.BillingType, true)
	res[18] = "SetupPrice: " + reform.Inspect(s.SetupPrice, true)
	res[19] = "UnitPrice: " + reform.Inspect(s.UnitPrice, true)
	res[20] = "MinUnits: " + reform.Inspect(s.MinUnits, true)
	res[21] = "MaxUnit: " + reform.Inspect(s.MaxUnit, true)
	res[22] = "BillingInterval: " + reform.Inspect(s.BillingInterval, true)
	res[23] = "MaxBillingUnitLag: " + reform.Inspect(s.MaxBillingUnitLag, true)
	res[24] = "MaxSuspendTime: " + reform.Inspect(s.MaxSuspendTime, true)
	res[25] = "MaxInactiveTimeSec: " + reform.Inspect(s.MaxInactiveTimeSec, true)
	res[26] = "FreeUnits: " + reform.Inspect(s.FreeUnits, true)
	res[27] = "AdditionalParams: " + reform.Inspect(s.AdditionalParams, true)
	res[28] = "AutoPopUp: " + reform.Inspect(s.AutoPopUp, true)
	res[29] = "SOMCType: " + reform.Inspect(s.SOMCType, true)
	res[30] = "SOMCData: " + reform.Inspect(s.SOMCData, true)
	res[31] = "SOMCSuccessPing: " + reform.Inspect(s.SOMCSuccessPing, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Offering) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.IsLocal,
		s.IPType,
		s.Template,
		s.Product,
		s.Hash,
		s.Status,
		s.BlockNumberUpdated,
		s.Agent,
		s.RawMsg,
		s.ServiceName,
		s.Description,
		s.Country,
		s.Supply,
		s.CurrentSupply,
		s.UnitName,
		s.UnitType,
		s.BillingType,
		s.SetupPrice,
		s.UnitPrice,
		s.MinUnits,
		s.MaxUnit,
		s.BillingInterval,
		s.MaxBillingUnitLag,
		s.MaxSuspendTime,
		s.MaxInactiveTimeSec,
		s.FreeUnits,
		s.AdditionalParams,
		s.AutoPopUp,
		s.SOMCType,
		s.SOMCData,
		s.SOMCSuccessPing,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Offering) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.IsLocal,
		&s.IPType,
		&s.Template,
		&s.Product,
		&s.Hash,
		&s.Status,
		&s.BlockNumberUpdated,
		&s.Agent,
		&s.RawMsg,
		&s.ServiceName,
		&s.Description,
		&s.Country,
		&s.Supply,
		&s.CurrentSupply,
		&s.UnitName,
		&s.UnitType,
		&s.BillingType,
		&s.SetupPrice,
		&s.UnitPrice,
		&s.MinUnits,
		&s.MaxUnit,
		&s.BillingInterval,
		&s.MaxBillingUnitLag,
		&s.MaxSuspendTime,
		&s.MaxInactiveTimeSec,
		&s.FreeUnits,
		&s.AdditionalParams,
		&s.AutoPopUp,
		&s.SOMCType,
		&s.SOMCData,
		&s.SOMCSuccessPing,
	}
}

// View returns View object for that struct.
func (s *Offering) View() reform.View {
	return OfferingTable
}

// Table returns Table object for that record.
func (s *Offering) Table() reform.Table {
	return OfferingTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Offering) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Offering) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Offering) HasPK() bool {
	return s.ID != OfferingTable.z[OfferingTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Offering) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = OfferingTable
	_ reform.Struct = (*Offering)(nil)
	_ reform.Table  = OfferingTable
	_ reform.Record = (*Offering)(nil)
	_ fmt.Stringer  = (*Offering)(nil)
)

type channelTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *channelTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("channels").
func (v *channelTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *channelTableType) Columns() []string {
	return []string{"id", "agent", "client", "offering", "block", "channel_status", "service_status", "service_changed_time", "prepared_at", "total_deposit", "salt", "username", "password", "receipt_balance", "receipt_signature"}
}

// NewStruct makes a new struct for that view or table.
func (v *channelTableType) NewStruct() reform.Struct {
	return new(Channel)
}

// NewRecord makes a new record for that table.
func (v *channelTableType) NewRecord() reform.Record {
	return new(Channel)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *channelTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ChannelTable represents channels view or table in SQL database.
var ChannelTable = &channelTableType{
	s: parse.StructInfo{Type: "Channel", SQLSchema: "", SQLName: "channels", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Agent", Type: "HexString", Column: "agent"}, {Name: "Client", Type: "HexString", Column: "client"}, {Name: "Offering", Type: "string", Column: "offering"}, {Name: "Block", Type: "uint32", Column: "block"}, {Name: "ChannelStatus", Type: "string", Column: "channel_status"}, {Name: "ServiceStatus", Type: "string", Column: "service_status"}, {Name: "ServiceChangedTime", Type: "*time.Time", Column: "service_changed_time"}, {Name: "PreparedAt", Type: "time.Time", Column: "prepared_at"}, {Name: "TotalDeposit", Type: "uint64", Column: "total_deposit"}, {Name: "Salt", Type: "uint64", Column: "salt"}, {Name: "Username", Type: "*string", Column: "username"}, {Name: "Password", Type: "Base64String", Column: "password"}, {Name: "ReceiptBalance", Type: "uint64", Column: "receipt_balance"}, {Name: "ReceiptSignature", Type: "*Base64String", Column: "receipt_signature"}}, PKFieldIndex: 0},
	z: new(Channel).Values(),
}

// String returns a string representation of this struct or record.
func (s Channel) String() string {
	res := make([]string, 15)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Agent: " + reform.Inspect(s.Agent, true)
	res[2] = "Client: " + reform.Inspect(s.Client, true)
	res[3] = "Offering: " + reform.Inspect(s.Offering, true)
	res[4] = "Block: " + reform.Inspect(s.Block, true)
	res[5] = "ChannelStatus: " + reform.Inspect(s.ChannelStatus, true)
	res[6] = "ServiceStatus: " + reform.Inspect(s.ServiceStatus, true)
	res[7] = "ServiceChangedTime: " + reform.Inspect(s.ServiceChangedTime, true)
	res[8] = "PreparedAt: " + reform.Inspect(s.PreparedAt, true)
	res[9] = "TotalDeposit: " + reform.Inspect(s.TotalDeposit, true)
	res[10] = "Salt: " + reform.Inspect(s.Salt, true)
	res[11] = "Username: " + reform.Inspect(s.Username, true)
	res[12] = "Password: " + reform.Inspect(s.Password, true)
	res[13] = "ReceiptBalance: " + reform.Inspect(s.ReceiptBalance, true)
	res[14] = "ReceiptSignature: " + reform.Inspect(s.ReceiptSignature, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Channel) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Agent,
		s.Client,
		s.Offering,
		s.Block,
		s.ChannelStatus,
		s.ServiceStatus,
		s.ServiceChangedTime,
		s.PreparedAt,
		s.TotalDeposit,
		s.Salt,
		s.Username,
		s.Password,
		s.ReceiptBalance,
		s.ReceiptSignature,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Channel) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Agent,
		&s.Client,
		&s.Offering,
		&s.Block,
		&s.ChannelStatus,
		&s.ServiceStatus,
		&s.ServiceChangedTime,
		&s.PreparedAt,
		&s.TotalDeposit,
		&s.Salt,
		&s.Username,
		&s.Password,
		&s.ReceiptBalance,
		&s.ReceiptSignature,
	}
}

// View returns View object for that struct.
func (s *Channel) View() reform.View {
	return ChannelTable
}

// Table returns Table object for that record.
func (s *Channel) Table() reform.Table {
	return ChannelTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Channel) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Channel) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Channel) HasPK() bool {
	return s.ID != ChannelTable.z[ChannelTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Channel) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ChannelTable
	_ reform.Struct = (*Channel)(nil)
	_ reform.Table  = ChannelTable
	_ reform.Record = (*Channel)(nil)
	_ fmt.Stringer  = (*Channel)(nil)
)

type sessionTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *sessionTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("sessions").
func (v *sessionTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *sessionTableType) Columns() []string {
	return []string{"id", "channel", "started", "stopped", "units_used", "seconds_consumed", "last_usage_time", "client_ip", "client_port"}
}

// NewStruct makes a new struct for that view or table.
func (v *sessionTableType) NewStruct() reform.Struct {
	return new(Session)
}

// NewRecord makes a new record for that table.
func (v *sessionTableType) NewRecord() reform.Record {
	return new(Session)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *sessionTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// SessionTable represents sessions view or table in SQL database.
var SessionTable = &sessionTableType{
	s: parse.StructInfo{Type: "Session", SQLSchema: "", SQLName: "sessions", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Channel", Type: "string", Column: "channel"}, {Name: "Started", Type: "time.Time", Column: "started"}, {Name: "Stopped", Type: "*time.Time", Column: "stopped"}, {Name: "UnitsUsed", Type: "uint64", Column: "units_used"}, {Name: "SecondsConsumed", Type: "uint64", Column: "seconds_consumed"}, {Name: "LastUsageTime", Type: "time.Time", Column: "last_usage_time"}, {Name: "ClientIP", Type: "*string", Column: "client_ip"}, {Name: "ClientPort", Type: "*uint16", Column: "client_port"}}, PKFieldIndex: 0},
	z: new(Session).Values(),
}

// String returns a string representation of this struct or record.
func (s Session) String() string {
	res := make([]string, 9)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Channel: " + reform.Inspect(s.Channel, true)
	res[2] = "Started: " + reform.Inspect(s.Started, true)
	res[3] = "Stopped: " + reform.Inspect(s.Stopped, true)
	res[4] = "UnitsUsed: " + reform.Inspect(s.UnitsUsed, true)
	res[5] = "SecondsConsumed: " + reform.Inspect(s.SecondsConsumed, true)
	res[6] = "LastUsageTime: " + reform.Inspect(s.LastUsageTime, true)
	res[7] = "ClientIP: " + reform.Inspect(s.ClientIP, true)
	res[8] = "ClientPort: " + reform.Inspect(s.ClientPort, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Session) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Channel,
		s.Started,
		s.Stopped,
		s.UnitsUsed,
		s.SecondsConsumed,
		s.LastUsageTime,
		s.ClientIP,
		s.ClientPort,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Session) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Channel,
		&s.Started,
		&s.Stopped,
		&s.UnitsUsed,
		&s.SecondsConsumed,
		&s.LastUsageTime,
		&s.ClientIP,
		&s.ClientPort,
	}
}

// View returns View object for that struct.
func (s *Session) View() reform.View {
	return SessionTable
}

// Table returns Table object for that record.
func (s *Session) Table() reform.Table {
	return SessionTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Session) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Session) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Session) HasPK() bool {
	return s.ID != SessionTable.z[SessionTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Session) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = SessionTable
	_ reform.Struct = (*Session)(nil)
	_ reform.Table  = SessionTable
	_ reform.Record = (*Session)(nil)
	_ fmt.Stringer  = (*Session)(nil)
)

type contractTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *contractTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("contracts").
func (v *contractTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *contractTableType) Columns() []string {
	return []string{"id", "address", "type", "version", "enabled"}
}

// NewStruct makes a new struct for that view or table.
func (v *contractTableType) NewStruct() reform.Struct {
	return new(Contract)
}

// NewRecord makes a new record for that table.
func (v *contractTableType) NewRecord() reform.Record {
	return new(Contract)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *contractTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ContractTable represents contracts view or table in SQL database.
var ContractTable = &contractTableType{
	s: parse.StructInfo{Type: "Contract", SQLSchema: "", SQLName: "contracts", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Address", Type: "HexString", Column: "address"}, {Name: "Type", Type: "string", Column: "type"}, {Name: "Version", Type: "*uint8", Column: "version"}, {Name: "Enabled", Type: "bool", Column: "enabled"}}, PKFieldIndex: 0},
	z: new(Contract).Values(),
}

// String returns a string representation of this struct or record.
func (s Contract) String() string {
	res := make([]string, 5)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Address: " + reform.Inspect(s.Address, true)
	res[2] = "Type: " + reform.Inspect(s.Type, true)
	res[3] = "Version: " + reform.Inspect(s.Version, true)
	res[4] = "Enabled: " + reform.Inspect(s.Enabled, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Contract) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Address,
		s.Type,
		s.Version,
		s.Enabled,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Contract) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Address,
		&s.Type,
		&s.Version,
		&s.Enabled,
	}
}

// View returns View object for that struct.
func (s *Contract) View() reform.View {
	return ContractTable
}

// Table returns Table object for that record.
func (s *Contract) Table() reform.Table {
	return ContractTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Contract) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Contract) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Contract) HasPK() bool {
	return s.ID != ContractTable.z[ContractTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Contract) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ContractTable
	_ reform.Struct = (*Contract)(nil)
	_ reform.Table  = ContractTable
	_ reform.Record = (*Contract)(nil)
	_ fmt.Stringer  = (*Contract)(nil)
)

type settingTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *settingTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("settings").
func (v *settingTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *settingTableType) Columns() []string {
	return []string{"key", "value", "permissions", "description", "name"}
}

// NewStruct makes a new struct for that view or table.
func (v *settingTableType) NewStruct() reform.Struct {
	return new(Setting)
}

// NewRecord makes a new record for that table.
func (v *settingTableType) NewRecord() reform.Record {
	return new(Setting)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *settingTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// SettingTable represents settings view or table in SQL database.
var SettingTable = &settingTableType{
	s: parse.StructInfo{Type: "Setting", SQLSchema: "", SQLName: "settings", Fields: []parse.FieldInfo{{Name: "Key", Type: "string", Column: "key"}, {Name: "Value", Type: "string", Column: "value"}, {Name: "Permissions", Type: "int", Column: "permissions"}, {Name: "Description", Type: "*string", Column: "description"}, {Name: "Name", Type: "string", Column: "name"}}, PKFieldIndex: 0},
	z: new(Setting).Values(),
}

// String returns a string representation of this struct or record.
func (s Setting) String() string {
	res := make([]string, 5)
	res[0] = "Key: " + reform.Inspect(s.Key, true)
	res[1] = "Value: " + reform.Inspect(s.Value, true)
	res[2] = "Permissions: " + reform.Inspect(s.Permissions, true)
	res[3] = "Description: " + reform.Inspect(s.Description, true)
	res[4] = "Name: " + reform.Inspect(s.Name, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Setting) Values() []interface{} {
	return []interface{}{
		s.Key,
		s.Value,
		s.Permissions,
		s.Description,
		s.Name,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Setting) Pointers() []interface{} {
	return []interface{}{
		&s.Key,
		&s.Value,
		&s.Permissions,
		&s.Description,
		&s.Name,
	}
}

// View returns View object for that struct.
func (s *Setting) View() reform.View {
	return SettingTable
}

// Table returns Table object for that record.
func (s *Setting) Table() reform.Table {
	return SettingTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Setting) PKValue() interface{} {
	return s.Key
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Setting) PKPointer() interface{} {
	return &s.Key
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Setting) HasPK() bool {
	return s.Key != SettingTable.z[SettingTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Setting) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.Key = string(i64)
	} else {
		s.Key = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = SettingTable
	_ reform.Struct = (*Setting)(nil)
	_ reform.Table  = SettingTable
	_ reform.Record = (*Setting)(nil)
	_ fmt.Stringer  = (*Setting)(nil)
)

type endpointTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *endpointTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("endpoints").
func (v *endpointTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *endpointTableType) Columns() []string {
	return []string{"id", "template", "channel", "hash", "raw_msg", "payment_receiver_address", "service_endpoint_address", "username", "password", "additional_params", "country_status"}
}

// NewStruct makes a new struct for that view or table.
func (v *endpointTableType) NewStruct() reform.Struct {
	return new(Endpoint)
}

// NewRecord makes a new record for that table.
func (v *endpointTableType) NewRecord() reform.Record {
	return new(Endpoint)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *endpointTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EndpointTable represents endpoints view or table in SQL database.
var EndpointTable = &endpointTableType{
	s: parse.StructInfo{Type: "Endpoint", SQLSchema: "", SQLName: "endpoints", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Template", Type: "string", Column: "template"}, {Name: "Channel", Type: "string", Column: "channel"}, {Name: "Hash", Type: "HexString", Column: "hash"}, {Name: "RawMsg", Type: "Base64String", Column: "raw_msg"}, {Name: "PaymentReceiverAddress", Type: "*string", Column: "payment_receiver_address"}, {Name: "ServiceEndpointAddress", Type: "*string", Column: "service_endpoint_address"}, {Name: "Username", Type: "*string", Column: "username"}, {Name: "Password", Type: "*string", Column: "password"}, {Name: "AdditionalParams", Type: "[]uint8", Column: "additional_params"}, {Name: "CountryStatus", Type: "*string", Column: "country_status"}}, PKFieldIndex: 0},
	z: new(Endpoint).Values(),
}

// String returns a string representation of this struct or record.
func (s Endpoint) String() string {
	res := make([]string, 11)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Template: " + reform.Inspect(s.Template, true)
	res[2] = "Channel: " + reform.Inspect(s.Channel, true)
	res[3] = "Hash: " + reform.Inspect(s.Hash, true)
	res[4] = "RawMsg: " + reform.Inspect(s.RawMsg, true)
	res[5] = "PaymentReceiverAddress: " + reform.Inspect(s.PaymentReceiverAddress, true)
	res[6] = "ServiceEndpointAddress: " + reform.Inspect(s.ServiceEndpointAddress, true)
	res[7] = "Username: " + reform.Inspect(s.Username, true)
	res[8] = "Password: " + reform.Inspect(s.Password, true)
	res[9] = "AdditionalParams: " + reform.Inspect(s.AdditionalParams, true)
	res[10] = "CountryStatus: " + reform.Inspect(s.CountryStatus, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Endpoint) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Template,
		s.Channel,
		s.Hash,
		s.RawMsg,
		s.PaymentReceiverAddress,
		s.ServiceEndpointAddress,
		s.Username,
		s.Password,
		s.AdditionalParams,
		s.CountryStatus,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Endpoint) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Template,
		&s.Channel,
		&s.Hash,
		&s.RawMsg,
		&s.PaymentReceiverAddress,
		&s.ServiceEndpointAddress,
		&s.Username,
		&s.Password,
		&s.AdditionalParams,
		&s.CountryStatus,
	}
}

// View returns View object for that struct.
func (s *Endpoint) View() reform.View {
	return EndpointTable
}

// Table returns Table object for that record.
func (s *Endpoint) Table() reform.Table {
	return EndpointTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Endpoint) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Endpoint) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Endpoint) HasPK() bool {
	return s.ID != EndpointTable.z[EndpointTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Endpoint) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = EndpointTable
	_ reform.Struct = (*Endpoint)(nil)
	_ reform.Table  = EndpointTable
	_ reform.Record = (*Endpoint)(nil)
	_ fmt.Stringer  = (*Endpoint)(nil)
)

type endpointUITableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *endpointUITableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("endpoints").
func (v *endpointUITableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *endpointUITableType) Columns() []string {
	return []string{"id", "payment_receiver_address", "service_endpoint_address", "country_status"}
}

// NewStruct makes a new struct for that view or table.
func (v *endpointUITableType) NewStruct() reform.Struct {
	return new(EndpointUI)
}

// NewRecord makes a new record for that table.
func (v *endpointUITableType) NewRecord() reform.Record {
	return new(EndpointUI)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *endpointUITableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EndpointUITable represents endpoints view or table in SQL database.
var EndpointUITable = &endpointUITableType{
	s: parse.StructInfo{Type: "EndpointUI", SQLSchema: "", SQLName: "endpoints", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "PaymentReceiverAddress", Type: "*string", Column: "payment_receiver_address"}, {Name: "ServiceEndpointAddress", Type: "*string", Column: "service_endpoint_address"}, {Name: "CountryStatus", Type: "*string", Column: "country_status"}}, PKFieldIndex: 0},
	z: new(EndpointUI).Values(),
}

// String returns a string representation of this struct or record.
func (s EndpointUI) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "PaymentReceiverAddress: " + reform.Inspect(s.PaymentReceiverAddress, true)
	res[2] = "ServiceEndpointAddress: " + reform.Inspect(s.ServiceEndpointAddress, true)
	res[3] = "CountryStatus: " + reform.Inspect(s.CountryStatus, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *EndpointUI) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.PaymentReceiverAddress,
		s.ServiceEndpointAddress,
		s.CountryStatus,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *EndpointUI) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.PaymentReceiverAddress,
		&s.ServiceEndpointAddress,
		&s.CountryStatus,
	}
}

// View returns View object for that struct.
func (s *EndpointUI) View() reform.View {
	return EndpointUITable
}

// Table returns Table object for that record.
func (s *EndpointUI) Table() reform.Table {
	return EndpointUITable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *EndpointUI) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *EndpointUI) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *EndpointUI) HasPK() bool {
	return s.ID != EndpointUITable.z[EndpointUITable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *EndpointUI) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = EndpointUITable
	_ reform.Struct = (*EndpointUI)(nil)
	_ reform.Table  = EndpointUITable
	_ reform.Record = (*EndpointUI)(nil)
	_ fmt.Stringer  = (*EndpointUI)(nil)
)

type jobTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *jobTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("jobs").
func (v *jobTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *jobTableType) Columns() []string {
	return []string{"id", "type", "status", "related_type", "related_id", "created_at", "not_before", "created_by", "try_count", "data"}
}

// NewStruct makes a new struct for that view or table.
func (v *jobTableType) NewStruct() reform.Struct {
	return new(Job)
}

// NewRecord makes a new record for that table.
func (v *jobTableType) NewRecord() reform.Record {
	return new(Job)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *jobTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// JobTable represents jobs view or table in SQL database.
var JobTable = &jobTableType{
	s: parse.StructInfo{Type: "Job", SQLSchema: "", SQLName: "jobs", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "string", Column: "type"}, {Name: "Status", Type: "string", Column: "status"}, {Name: "RelatedType", Type: "string", Column: "related_type"}, {Name: "RelatedID", Type: "string", Column: "related_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "NotBefore", Type: "time.Time", Column: "not_before"}, {Name: "CreatedBy", Type: "string", Column: "created_by"}, {Name: "TryCount", Type: "uint8", Column: "try_count"}, {Name: "Data", Type: "[]uint8", Column: "data"}}, PKFieldIndex: 0},
	z: new(Job).Values(),
}

// String returns a string representation of this struct or record.
func (s Job) String() string {
	res := make([]string, 10)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Status: " + reform.Inspect(s.Status, true)
	res[3] = "RelatedType: " + reform.Inspect(s.RelatedType, true)
	res[4] = "RelatedID: " + reform.Inspect(s.RelatedID, true)
	res[5] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[6] = "NotBefore: " + reform.Inspect(s.NotBefore, true)
	res[7] = "CreatedBy: " + reform.Inspect(s.CreatedBy, true)
	res[8] = "TryCount: " + reform.Inspect(s.TryCount, true)
	res[9] = "Data: " + reform.Inspect(s.Data, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Job) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Status,
		s.RelatedType,
		s.RelatedID,
		s.CreatedAt,
		s.NotBefore,
		s.CreatedBy,
		s.TryCount,
		s.Data,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Job) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Status,
		&s.RelatedType,
		&s.RelatedID,
		&s.CreatedAt,
		&s.NotBefore,
		&s.CreatedBy,
		&s.TryCount,
		&s.Data,
	}
}

// View returns View object for that struct.
func (s *Job) View() reform.View {
	return JobTable
}

// Table returns Table object for that record.
func (s *Job) Table() reform.Table {
	return JobTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Job) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Job) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Job) HasPK() bool {
	return s.ID != JobTable.z[JobTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Job) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = JobTable
	_ reform.Struct = (*Job)(nil)
	_ reform.Table  = JobTable
	_ reform.Record = (*Job)(nil)
	_ fmt.Stringer  = (*Job)(nil)
)

type ethTxTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *ethTxTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("eth_txs").
func (v *ethTxTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *ethTxTableType) Columns() []string {
	return []string{"id", "hash", "method", "status", "job", "issued", "addr_from", "addr_to", "nonce", "gas_price", "gas", "tx_raw", "related_type", "related_id"}
}

// NewStruct makes a new struct for that view or table.
func (v *ethTxTableType) NewStruct() reform.Struct {
	return new(EthTx)
}

// NewRecord makes a new record for that table.
func (v *ethTxTableType) NewRecord() reform.Record {
	return new(EthTx)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *ethTxTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EthTxTable represents eth_txs view or table in SQL database.
var EthTxTable = &ethTxTableType{
	s: parse.StructInfo{Type: "EthTx", SQLSchema: "", SQLName: "eth_txs", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Hash", Type: "HexString", Column: "hash"}, {Name: "Method", Type: "string", Column: "method"}, {Name: "Status", Type: "string", Column: "status"}, {Name: "JobID", Type: "*string", Column: "job"}, {Name: "Issued", Type: "time.Time", Column: "issued"}, {Name: "AddrFrom", Type: "HexString", Column: "addr_from"}, {Name: "AddrTo", Type: "HexString", Column: "addr_to"}, {Name: "Nonce", Type: "*string", Column: "nonce"}, {Name: "GasPrice", Type: "uint64", Column: "gas_price"}, {Name: "Gas", Type: "uint64", Column: "gas"}, {Name: "TxRaw", Type: "[]uint8", Column: "tx_raw"}, {Name: "RelatedType", Type: "string", Column: "related_type"}, {Name: "RelatedID", Type: "string", Column: "related_id"}}, PKFieldIndex: 0},
	z: new(EthTx).Values(),
}

// String returns a string representation of this struct or record.
func (s EthTx) String() string {
	res := make([]string, 14)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Hash: " + reform.Inspect(s.Hash, true)
	res[2] = "Method: " + reform.Inspect(s.Method, true)
	res[3] = "Status: " + reform.Inspect(s.Status, true)
	res[4] = "JobID: " + reform.Inspect(s.JobID, true)
	res[5] = "Issued: " + reform.Inspect(s.Issued, true)
	res[6] = "AddrFrom: " + reform.Inspect(s.AddrFrom, true)
	res[7] = "AddrTo: " + reform.Inspect(s.AddrTo, true)
	res[8] = "Nonce: " + reform.Inspect(s.Nonce, true)
	res[9] = "GasPrice: " + reform.Inspect(s.GasPrice, true)
	res[10] = "Gas: " + reform.Inspect(s.Gas, true)
	res[11] = "TxRaw: " + reform.Inspect(s.TxRaw, true)
	res[12] = "RelatedType: " + reform.Inspect(s.RelatedType, true)
	res[13] = "RelatedID: " + reform.Inspect(s.RelatedID, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *EthTx) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Hash,
		s.Method,
		s.Status,
		s.JobID,
		s.Issued,
		s.AddrFrom,
		s.AddrTo,
		s.Nonce,
		s.GasPrice,
		s.Gas,
		s.TxRaw,
		s.RelatedType,
		s.RelatedID,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *EthTx) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Hash,
		&s.Method,
		&s.Status,
		&s.JobID,
		&s.Issued,
		&s.AddrFrom,
		&s.AddrTo,
		&s.Nonce,
		&s.GasPrice,
		&s.Gas,
		&s.TxRaw,
		&s.RelatedType,
		&s.RelatedID,
	}
}

// View returns View object for that struct.
func (s *EthTx) View() reform.View {
	return EthTxTable
}

// Table returns Table object for that record.
func (s *EthTx) Table() reform.Table {
	return EthTxTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *EthTx) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *EthTx) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *EthTx) HasPK() bool {
	return s.ID != EthTxTable.z[EthTxTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *EthTx) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = EthTxTable
	_ reform.Struct = (*EthTx)(nil)
	_ reform.Table  = EthTxTable
	_ reform.Record = (*EthTx)(nil)
	_ fmt.Stringer  = (*EthTx)(nil)
)

type logEventViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *logEventViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("log_events").
func (v *logEventViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *logEventViewType) Columns() []string {
	return []string{"time", "level", "message", "context", "stack"}
}

// NewStruct makes a new struct for that view or table.
func (v *logEventViewType) NewStruct() reform.Struct {
	return new(LogEvent)
}

// LogEventView represents log_events view or table in SQL database.
var LogEventView = &logEventViewType{
	s: parse.StructInfo{Type: "LogEvent", SQLSchema: "", SQLName: "log_events", Fields: []parse.FieldInfo{{Name: "Time", Type: "time.Time", Column: "time"}, {Name: "Level", Type: "log.Level", Column: "level"}, {Name: "Message", Type: "string", Column: "message"}, {Name: "Context", Type: "json.RawMessage", Column: "context"}, {Name: "Stack", Type: "*string", Column: "stack"}}, PKFieldIndex: -1},
	z: new(LogEvent).Values(),
}

// String returns a string representation of this struct or record.
func (s LogEvent) String() string {
	res := make([]string, 5)
	res[0] = "Time: " + reform.Inspect(s.Time, true)
	res[1] = "Level: " + reform.Inspect(s.Level, true)
	res[2] = "Message: " + reform.Inspect(s.Message, true)
	res[3] = "Context: " + reform.Inspect(s.Context, true)
	res[4] = "Stack: " + reform.Inspect(s.Stack, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *LogEvent) Values() []interface{} {
	return []interface{}{
		s.Time,
		s.Level,
		s.Message,
		s.Context,
		s.Stack,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *LogEvent) Pointers() []interface{} {
	return []interface{}{
		&s.Time,
		&s.Level,
		&s.Message,
		&s.Context,
		&s.Stack,
	}
}

// View returns View object for that struct.
func (s *LogEvent) View() reform.View {
	return LogEventView
}

// check interfaces
var (
	_ reform.View   = LogEventView
	_ reform.Struct = (*LogEvent)(nil)
	_ fmt.Stringer  = (*LogEvent)(nil)
)

type closingTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *closingTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("closings").
func (v *closingTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *closingTableType) Columns() []string {
	return []string{"id", "type", "agent", "client", "balance", "block"}
}

// NewStruct makes a new struct for that view or table.
func (v *closingTableType) NewStruct() reform.Struct {
	return new(Closing)
}

// NewRecord makes a new record for that table.
func (v *closingTableType) NewRecord() reform.Record {
	return new(Closing)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *closingTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ClosingTable represents closings view or table in SQL database.
var ClosingTable = &closingTableType{
	s: parse.StructInfo{Type: "Closing", SQLSchema: "", SQLName: "closings", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "string", Column: "type"}, {Name: "Agent", Type: "HexString", Column: "agent"}, {Name: "Client", Type: "HexString", Column: "client"}, {Name: "Balance", Type: "uint64", Column: "balance"}, {Name: "Block", Type: "uint32", Column: "block"}}, PKFieldIndex: 0},
	z: new(Closing).Values(),
}

// String returns a string representation of this struct or record.
func (s Closing) String() string {
	res := make([]string, 6)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Agent: " + reform.Inspect(s.Agent, true)
	res[3] = "Client: " + reform.Inspect(s.Client, true)
	res[4] = "Balance: " + reform.Inspect(s.Balance, true)
	res[5] = "Block: " + reform.Inspect(s.Block, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Closing) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Agent,
		s.Client,
		s.Balance,
		s.Block,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Closing) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Agent,
		&s.Client,
		&s.Balance,
		&s.Block,
	}
}

// View returns View object for that struct.
func (s *Closing) View() reform.View {
	return ClosingTable
}

// Table returns Table object for that record.
func (s *Closing) Table() reform.Table {
	return ClosingTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Closing) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Closing) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Closing) HasPK() bool {
	return s.ID != ClosingTable.z[ClosingTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Closing) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ClosingTable
	_ reform.Struct = (*Closing)(nil)
	_ reform.Table  = ClosingTable
	_ reform.Record = (*Closing)(nil)
	_ fmt.Stringer  = (*Closing)(nil)
)

type ratingTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *ratingTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("ratings").
func (v *ratingTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *ratingTableType) Columns() []string {
	return []string{"eth_addr", "val"}
}

// NewStruct makes a new struct for that view or table.
func (v *ratingTableType) NewStruct() reform.Struct {
	return new(Rating)
}

// NewRecord makes a new record for that table.
func (v *ratingTableType) NewRecord() reform.Record {
	return new(Rating)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *ratingTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// RatingTable represents ratings view or table in SQL database.
var RatingTable = &ratingTableType{
	s: parse.StructInfo{Type: "Rating", SQLSchema: "", SQLName: "ratings", Fields: []parse.FieldInfo{{Name: "EthAddr", Type: "HexString", Column: "eth_addr"}, {Name: "Val", Type: "uint64", Column: "val"}}, PKFieldIndex: 0},
	z: new(Rating).Values(),
}

// String returns a string representation of this struct or record.
func (s Rating) String() string {
	res := make([]string, 2)
	res[0] = "EthAddr: " + reform.Inspect(s.EthAddr, true)
	res[1] = "Val: " + reform.Inspect(s.Val, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Rating) Values() []interface{} {
	return []interface{}{
		s.EthAddr,
		s.Val,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Rating) Pointers() []interface{} {
	return []interface{}{
		&s.EthAddr,
		&s.Val,
	}
}

// View returns View object for that struct.
func (s *Rating) View() reform.View {
	return RatingTable
}

// Table returns Table object for that record.
func (s *Rating) Table() reform.Table {
	return RatingTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Rating) PKValue() interface{} {
	return s.EthAddr
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Rating) PKPointer() interface{} {
	return &s.EthAddr
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Rating) HasPK() bool {
	return s.EthAddr != RatingTable.z[RatingTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Rating) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.EthAddr = HexString(i64)
	} else {
		s.EthAddr = pk.(HexString)
	}
}

// check interfaces
var (
	_ reform.View   = RatingTable
	_ reform.Struct = (*Rating)(nil)
	_ reform.Table  = RatingTable
	_ reform.Record = (*Rating)(nil)
	_ fmt.Stringer  = (*Rating)(nil)
)

func init() {
	parse.AssertUpToDate(&AccountTable.s, new(Account))
	parse.AssertUpToDate(&UserTable.s, new(User))
	parse.AssertUpToDate(&TemplateTable.s, new(Template))
	parse.AssertUpToDate(&ProductTable.s, new(Product))
	parse.AssertUpToDate(&OfferingTable.s, new(Offering))
	parse.AssertUpToDate(&ChannelTable.s, new(Channel))
	parse.AssertUpToDate(&SessionTable.s, new(Session))
	parse.AssertUpToDate(&ContractTable.s, new(Contract))
	parse.AssertUpToDate(&SettingTable.s, new(Setting))
	parse.AssertUpToDate(&EndpointTable.s, new(Endpoint))
	parse.AssertUpToDate(&EndpointUITable.s, new(EndpointUI))
	parse.AssertUpToDate(&JobTable.s, new(Job))
	parse.AssertUpToDate(&EthTxTable.s, new(EthTx))
	parse.AssertUpToDate(&LogEventView.s, new(LogEvent))
	parse.AssertUpToDate(&ClosingTable.s, new(Closing))
	parse.AssertUpToDate(&RatingTable.s, new(Rating))
}
