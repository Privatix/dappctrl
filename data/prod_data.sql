DO $$
DECLARE
        cur_key varchar := 'system.gui';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '{}',
                        0,
                        '',
                        'GUI settings');
        END IF;
END $$;

-- TODO(furkhat) Remove updateDismissVersion when front-end migrates completely to use `system.gui`
DO $$
DECLARE
        cur_key varchar := 'updateDismissVersion';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '',
                        2,
                        '',
                        'Update dismiss version');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.min.confirmations';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '1',
                        2,
                        'have value (stored as string) that is null or integer and' ||
                        ' represents how many ethereum blocks should be mined after' ||
                        ' block where transaction of interest exists. As there is non' ||
                        ' zero probability of attack where some last blocks can be' ||
                        ' generated by attacker and will be than ignored by ethereum' ||
                        ' network (uncle blocks) after attack detection. dappctrl' ||
                        ' give ability to user to specify how many latest blocks' ||
                        ' are considered non reliable. These last blocks' ||
                        ' will not be used to fetch events or transactions.',
                        'ethereum confirmation blocks');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.event.freshblocks';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '11520',
                        2,
                        'defines number of latest ethereum blocks to retrieve.' ||
                        ' If eth.event.freshblocks is null or zero then all events' ||
                        ' will be downloaded.',
                        'last events blocks');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.event.blocklimit';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '500',
                        2,
                        'maximum number of ethereum blocks that is used to scan' ||
                        ' for new events. It is used as pagination mechanism while' ||
                        ' querying ethereum JSON RPC. If eth.event.blocklimit is null' ||
                        ' or zero then no pagination is used, which is not recommended.',
                        'maximum events blocks');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'error.sendremote';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        'true',
                        2,
                        'Allow error reporting to send logs to Privatix.',
                        'error reporting');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.default.gasprice';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '20000000000',
                        2,
                        'Default GAS price for transactions.',
                        'default gas price');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.max.deposit';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES (cur_key,
                        '30000000000',
                        2,
                        'We temporarily limit total token deposits in a channel to 300' ||
                        ' PRIX. This is just for the bug bounty release, as a safety measure.',
                        'maximum deposit');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'eth.event.lastProcessedBlock';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                        VALUES (cur_key,
                                '0',
                                1,
                                'Last block number in blockchain stores last proccessed block.',
                                'last processed block');
        END IF;
END $$;


DO $$
DECLARE
        cur_key varchar := 'offering.autopopup';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                        VALUES (cur_key,
                                'true',
                                2,
                                'Allow offerings to pop up automatically.',
                                'offering autopopup');
        END IF;
END $$;


DO $$
DECLARE
        cur_key varchar := 'psc.periods.challenge';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                        VALUES(cur_key,
                        '5000',
                        1,
                        'Number of blocks to be mined to finish uncooperative channel close',
                        'Challenge period');
        ELSE
                UPDATE settings set value='5000' WHERE key=cur_key;
        END IF;
END $$;


DO $$
DECLARE
        cur_key varchar := 'psc.periods.popup';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                        VALUES(cur_key,
                        '500',
                        1,
                        'Number of blocks to be mined to repeatedly pop up an offering',
                        'Popup period');
        ELSE
                UPDATE settings set value='500' WHERE key=cur_key;
        END IF;
END $$;


DO $$
DECLARE
        cur_key varchar := 'psc.periods.remove';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                        VALUES(cur_key,
                        '100',
                        1,
                        'Number of blocks to be mined from last offering update in blockchain to remove offering',
                        'Remove period');
        ELSE
                UPDATE settings set value='100' WHERE key=cur_key;
        END IF;
END $$;


DO $$
DECLARE
        cur_key varchar := 'client.min.deposit';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES('client.min.deposit',
                        '0',
                        2,
                        'This value will override min. deposit proposed by Agent' ||
                        ' in auto-increase mode, if greater than proposed. ',
                        'Min deposit');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'client.autoincrease.percent';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES(cur_key,
                        '60',
                        2,
                        'This setting specifies when to increase deposit. Increase deposit,' ||
                        ' when current usage is bigger or equal to this percent of total used units.',
                        'Top up after using %');
        END IF;
END $$;

DO $$
DECLARE
        cur_key varchar := 'client.autoincrease.deposit';
BEGIN
        IF NOT EXISTS 
                (SELECT  1
                        FROM    settings
                        WHERE   key=cur_key)
        THEN
                INSERT INTO settings (key, value, permissions, description, name)
                VALUES(cur_key,
                        'true',
                        2,
                        'Enable or disable auto-increase mode. Only for client.',
                        'Client auto increase deposit');
        END IF;
END $$;